// Test ID: IIDSAT

// Import React Router hooks ƒë·ªÉ fetch data v√† load menu
import { useFetcher, useLoaderData } from "react-router-dom";
import { useEffect } from "react";

// Import service ƒë·ªÉ l·∫•y order data
import { getOrder } from "../../services/apiRestaurant";

// Import utility functions
import {
  calcMinutesLeft,
  formatCurrency,
  formatDate,
} from "../../utils/helpers";

// Import components
import OrderItem from "./OrderItem";
import UpdateOrder from "./UpdateOrder";

/**
 * Component Order - Trang hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng
 * Hi·ªÉn th·ªã th√¥ng tin order, danh s√°ch pizza v√† cho ph√©p c·∫≠p nh·∫≠t priority
 */
function Order() {
  // L·∫•y d·ªØ li·ªáu order t·ª´ loader function
  const order = useLoaderData();

  // Fetcher ƒë·ªÉ load d·ªØ li·ªáu menu (ƒë·ªÉ hi·ªÉn th·ªã ingredients)
  const fetcher = useFetcher();

  // Effect ƒë·ªÉ fetch menu data n·∫øu ch∆∞a c√≥
  useEffect(
    function () {
      // Ch·ªâ fetch khi ch∆∞a c√≥ data v√† fetcher ƒëang idle
      if (!fetcher.data && fetcher.state === "idle") fetcher.load("/menu");
    },
    [fetcher],
  );

  // Destructure th√¥ng tin order
  const {
    id,
    status,
    priority,
    priorityPrice,
    orderPrice,
    estimatedDelivery,
    cart,
  } = order;

  // T√≠nh th·ªùi gian c√≤n l·∫°i ƒë·∫øn khi giao h√†ng
  const deliveryIn = calcMinutesLeft(estimatedDelivery);

  return (
    <div className="space-y-6 px-4 py-6">
      {/* Header v·ªõi order ID v√† status */}
      <div className="flex flex-wrap items-center justify-between gap-4">
        <h2 className="text-xl font-semibold">Order #{id} status</h2>

        {/* Badges hi·ªÉn th·ªã priority v√† status */}
        <div className="space-x-2">
          {/* Badge priority - ch·ªâ hi·ªÉn th·ªã n·∫øu order c√≥ priority */}
          {priority && (
            <span className="rounded-full bg-red-500 px-3 py-1 text-sm font-semibold tracking-wide text-red-100 uppercase">
              Priority
            </span>
          )}
          {/* Badge status c·ªßa order */}
          <span className="rounded-full bg-green-500 px-3 py-1 text-sm font-semibold tracking-wide text-green-100 uppercase">
            {status} order
          </span>
        </div>
      </div>

      {/* Th√¥ng tin th·ªùi gian giao h√†ng */}
      <div className="flex flex-wrap items-center justify-between gap-4 bg-stone-200 px-3 py-2">
        <p className="font-medium">
          {deliveryIn >= 0
            ? `Only ${calcMinutesLeft(estimatedDelivery)} minutes left üòÉ`
            : "Order should have arrived"}
        </p>
        <p className="text-xs text-stone-500">
          (Estimated delivery: {formatDate(estimatedDelivery)})
        </p>
      </div>

      {/* Danh s√°ch pizza trong order */}
      <ul className="divide-y divide-stone-200 border-t border-b border-stone-200">
        {cart.map((item) => (
          <OrderItem
            key={item.pizzaId}
            item={item}
            isLoadingIngredients={fetcher.state === "loading"} // Loading state cho ingredients
            ingredients={
              // T√¨m ingredients t·ª´ menu data ƒë√£ fetch
              fetcher.data?.find((el) => el.id === item.pizzaId)?.ingredients ??
              []
            }
          />
        ))}
      </ul>

      {/* Th√¥ng tin gi√° c·∫£ */}
      <div className="space-y-2 bg-stone-200 px-3 py-2">
        {/* Gi√° pizza */}
        <p className="text-sm font-medium text-stone-600">
          Price pizza: {formatCurrency(orderPrice)}
        </p>

        {/* Gi√° priority (n·∫øu c√≥) */}
        {priority && (
          <p className="text-sm font-medium text-stone-600">
            Price priority: {formatCurrency(priorityPrice)}
          </p>
        )}

        {/* T·ªïng c·ªông */}
        <p className="font-bold text-stone-800">
          To pay on delivery: {formatCurrency(orderPrice + priorityPrice)}
        </p>
      </div>

      {/* Button ƒë·ªÉ th√™m priority (ch·ªâ hi·ªÉn th·ªã n·∫øu order ch∆∞a c√≥ priority) */}
      {!priority && <UpdateOrder order={order} />}
    </div>
  );
}

/**
 * Loader function - Fetch d·ªØ li·ªáu order tr∆∞·ªõc khi component render
 * @param {Object} params - Route parameters ch·ª©a orderId
 * @returns {Promise<Object>} Order data
 */
export async function loader({ params }) {
  const order = getOrder(params.orderId);
  return order;
}

export default Order;
